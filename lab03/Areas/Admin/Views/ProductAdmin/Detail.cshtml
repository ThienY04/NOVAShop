@model lab03.Models.Product
@{
    ViewData["Title"] = "Chi ti·∫øt s·∫£n ph·∫©m";
}

<h2 class="mb-4">Chi ti·∫øt s·∫£n ph·∫©m</h2>

<!-- Th√¥ng tin chung -->
<div class="row mb-4">
    <div class="col-md-4">
        @if (!string.IsNullOrEmpty(Model.ImageUrl))
        {
            <img id="product-image" src="~/images/@Model.ImageUrl" alt="·∫¢nh s·∫£n ph·∫©m" class="img-fluid rounded shadow-sm" style="max-width: 200px;" />
        }
        else
        {
            <div class="text-muted">Kh√¥ng c√≥ ·∫£nh</div>
        }
    </div>
    <div class="col-md-8">
        <div id="product-info-view">
            <h4 class="text-primary">@Model.Name</h4>
            <p><strong>Gi√°:</strong> @Model.Price.ToString("n0")‚Ç´</p>
            <p><strong>Danh m·ª•c:</strong> @Model.Category?.Name</p>
            <p><strong>M√¥ t·∫£:</strong><br /> @Model.Description</p>
            <button class="btn btn-sm btn-outline-primary mt-2" onclick="showEditProduct()">üìù S·ª≠a th√¥ng tin</button>
        </div>

        <div id="product-info-edit" style="display:none;">
            <input type="hidden" id="product-id" value="@Model.Id" />
            <div class="mb-2">
                <label>T√™n s·∫£n ph·∫©m</label>
                <input type="text" id="edit-name" class="form-control" value="@Model.Name" />
            </div>
            <div class="mb-2">
                <label>Gi√°</label>
                <input type="number" id="edit-price" class="form-control" value="@Model.Price" />
            </div>
            <div class="mb-2">
                <label>Danh m·ª•c</label>
                <select id="edit-category" class="form-control">
                    @{
                        var selectedValue = Model.CategoryId.ToString();
                        var categories = ViewBag.Categories as SelectList;
                    }
                    @foreach (var cat in categories)
                    {
                        <option value="@cat.Value" selected="@(cat.Value == selectedValue ? "selected" : null)">
                            @cat.Text
                        </option>
                    }
                </select>
            </div>

            <div class="mb-2">
                <label>M√¥ t·∫£</label>
                <textarea id="edit-description" class="form-control">@Model.Description</textarea>
            </div>
            <div class="mb-2">
                <label>·∫¢nh s·∫£n ph·∫©m (jpg, png)</label>
                <input type="file" id="edit-image" class="form-control" accept="image/*" />
            </div>

            <div class="d-flex gap-2 mt-2">
                <button class="btn btn-sm btn-success" onclick="saveProduct()">üíæ L∆∞u</button>
                <button class="btn btn-sm btn-secondary" onclick="cancelEditProduct()">‚ùå Hu·ª∑</button>
            </div>
        </div>
    </div>
</div>


<hr />

<!-- FORM CH·ªàNH S·ª¨A BI·∫æN TH·ªÇ -->
<form asp-action="UpdateVariants" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="ProductId" value="@Model.Id" />
    <h5 class="mt-5 mb-3">Lo·∫°i s·∫£n ph·∫©m</h5>

    @if (Model.Variants != null && Model.Variants.Any())
    {
        <table class="table table-bordered text-center align-middle">
            <thead class="table-light">
                <tr>
                    <th>M√†u s·∫Øc</th>
                    <th>K√≠ch c·ª°</th>
                    <th>S·ªë l∆∞·ª£ng</th>
                    <th>H√†nh ƒë·ªông</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var variant in Model.Variants)
                {
                    <tr id="variant-row-@variant.Id" data-id="@variant.Id">
                        <td class="variant-color">@variant.Color</td>
                        <td class="variant-size">@variant.Size</td>
                        <td class="variant-stock">@variant.Stock</td>
                        <td>
                            <div class="d-flex gap-2 justify-content-center">
                                <button type="button" class="btn btn-sm btn-outline-warning"
                                        onclick="editVariant(@variant.Id, '@variant.Color', '@variant.Size', @variant.Stock)">
                                    <i class="bi bi-pencil"></i> S·ª≠a
                                </button>
                                <form asp-action="DeleteVariant" asp-controller="ProductAdmin" asp-route-id="@variant.Id"
                                      method="post" style="display:inline;"
                                      onsubmit="return confirm('B·∫°n c√≥ ch·∫Øc mu·ªën xo√° lo·∫°i n√†y?');">
                                    <button type="submit" class="btn btn-sm btn-outline-danger">
                                        <i class="bi bi-trash"></i> Xo√°
                                    </button>
                                </form>
                            </div>
                        </td>
                    </tr>
                }
                <tr id="new-variant-row" style="display: none;">
                    <td><input type="text" id="new-color" class="form-control" placeholder="M√†u s·∫Øc" /></td>
                    <td><input type="text" id="new-size" class="form-control" placeholder="K√≠ch c·ª°" /></td>
                    <td><input type="number" id="new-stock" class="form-control" min="1" value="1" /></td>
                    <td class="d-flex gap-2 justify-content-center">
                        <button type="button" class="btn btn-sm btn-success" onclick="addVariant(@Model.Id)">
                            <i class="bi bi-check-circle"></i> L∆∞u
                        </button>
                        <button type="button" class="btn btn-sm btn-secondary" onclick="cancelAddVariantRow()">
                            <i class="bi bi-x"></i> Hu·ª∑
                        </button>
                    </td>
                </tr>

            </tbody>

        </table>

        <div class="text-end">
            <button type="button" class="btn btn-success" onclick="showAddVariantRow()">
                <i class="bi bi-plus-circle"></i> Th√™m lo·∫°i s·∫£n ph·∫©m m·ªõi
            </button>
        </div>

    }
    else
    {
        <p class="text-muted">S·∫£n ph·∫©m n√†y ch∆∞a c√≥ lo·∫°i n√†o.</p>
        <a asp-action="CreateVariant" asp-controller="ProductAdmin" asp-route-productId="@Model.Id" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> Th√™m lo·∫°i s·∫£n ph·∫©m ƒë·∫ßu ti√™n
        </a>
    }

</form>

<hr />

<!-- N√∫t ƒëi·ªÅu h∆∞·ªõng -->
<div class="mt-4">
    <a asp-action="Index" class="btn btn-secondary">
        <i class="bi bi-arrow-left"></i> Quay l·∫°i danh s√°ch
    </a>
</div>


@section Scripts {
    <script>
        function editVariant(id, color, size, stock) {
            const row = document.getElementById(`variant-row-${id}`);
            row.innerHTML = `
                <td><input type="text" id="color-${id}" class="form-control" value="${color}" /></td>
                <td><input type="text" id="size-${id}" class="form-control" value="${size}" /></td>
                <td><input type="number" id="stock-${id}" class="form-control" min="0" value="${stock}" /></td>
                <td class="d-flex gap-2 justify-content-center">
                    <button type="button" class="btn btn-sm btn-success" onclick="saveVariant(${id})">
                        <i class="bi bi-check"></i> L∆∞u
                    </button>
                    <button class="btn btn-sm btn-secondary" onclick="cancelEdit(${id}, '${color}', '${size}', ${stock})">
                        <i class="bi bi-x"></i> Hu·ª∑
                    </button>
                </td>`;
        }

        function cancelEdit(id, color, size, stock) {
            const row = document.getElementById(`variant-row-${id}`);
            row.innerHTML = `
                <td class="variant-color">${color}</td>
                <td class="variant-size">${size}</td>
                <td class="variant-stock">${stock}</td>
                <td>
                    <div class="d-flex gap-2 justify-content-center">
                        <button type="button" class="btn btn-sm btn-outline-warning"
                                onclick="editVariant(${id}, '${color}', '${size}', ${stock})">
                            <i class="bi bi-pencil"></i> S·ª≠a
                        </button>
                        <form action="/Admin/ProductAdmin/DeleteVariant/${id}" method="post"
                              onsubmit="return confirm('B·∫°n c√≥ ch·∫Øc mu·ªën xo√°?');" style="display:inline;">
                            <button type="submit" class="btn btn-sm btn-outline-danger">
                                <i class="bi bi-trash"></i> Xo√°
                            </button>
                        </form>
                    </div>
                </td>`;
        }

        function saveVariant(id) {
            const color = document.getElementById(`color-${id}`).value;
            const size = document.getElementById(`size-${id}`).value;
            const stock = document.getElementById(`stock-${id}`).value;

            // ‚úÖ Ki·ªÉm tra s·ªë l∆∞·ª£ng
            if (isNaN(stock) || stock < 1) {
                alert("S·ªë l∆∞·ª£ng ph·∫£i > 1.");
                return;
            }
            fetch(`/Admin/ProductAdmin/UpdateVariant/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ id, color, size, stock })
            })
            .then(res => {
                if (res.ok) {
                    // C·∫≠p nh·∫≠t l·∫°i d√≤ng v·ªõi gi√° tr·ªã m·ªõi
                    cancelEdit(id, color, size, stock);
                } else {
                    alert("L∆∞u th·∫•t b·∫°i!");
                }
            })
            .catch(err => {
                console.error(err);
                alert("C√≥ l·ªói x·∫£y ra khi l∆∞u.");
            });
        }
        function showEditProduct() {
        document.getElementById("product-info-view").style.display = "none";
        document.getElementById("product-info-edit").style.display = "block";
        }

        function cancelEditProduct() {
            document.getElementById("product-info-edit").style.display = "none";
            document.getElementById("product-info-view").style.display = "block";
        }

        function saveProduct() {
            const id = document.getElementById("product-id").value;
            const name = document.getElementById("edit-name").value;
            const price = document.getElementById("edit-price").value;
            const description = document.getElementById("edit-description").value;
            const categoryId = document.getElementById("edit-category").value;

            const imageFile = document.getElementById("edit-image").files[0];

            if (!name.trim() || price < 1) {
                alert("T√™n v√† gi√° s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá.");
                return;
            }

            const formData = new FormData();
            formData.append("Id", id);
            formData.append("Name", name);
            formData.append("Price", price);
            formData.append("Description", description);
            formData.append("CategoryId", categoryId);  //m·ªõi th√™m
            if (imageFile) {
                formData.append("Image", imageFile);
            }

            fetch(`/Admin/ProductAdmin/UpdateBasic`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: formData
            })
            .then(res => {
                if (res.ok) {
                    location.reload();
                } else {
                    alert("Kh√¥ng th·ªÉ l∆∞u s·∫£n ph·∫©m.");
                }
            })
            .catch(err => {
                console.error(err);
                alert("C√≥ l·ªói x·∫£y ra.");
            });
        }


        function showAddVariantRow() {
        document.getElementById("new-variant-row").style.display = "table-row";
        }

        function cancelAddVariantRow() {
            document.getElementById("new-variant-row").style.display = "none";
            document.getElementById("new-color").value = "";
            document.getElementById("new-size").value = "";
            document.getElementById("new-stock").value = 1;
        }

        function addVariant(productId) {
            const color = document.getElementById("new-color").value.trim();
            const size = document.getElementById("new-size").value.trim();
            const stock = parseInt(document.getElementById("new-stock").value);

            if (!color || !size || isNaN(stock) || stock < 1) {
                alert("Vui l√≤ng nh·∫≠p ƒë√∫ng M√†u, Size v√† S·ªë l∆∞·ª£ng > 0.");
                return;
            }

            fetch(`/Admin/ProductAdmin/AddVariant`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ productId, color, size, stock })
            })
            .then(res => {
                if (res.ok) {
                    location.reload(); // ho·∫∑c c·∫≠p nh·∫≠t b·∫£ng m√† kh√¥ng reload n·∫øu mu·ªën
                } else {
                    alert("Kh√¥ng th·ªÉ th√™m.");
                }
            })
            .catch(err => {
                console.error(err);
                alert("C√≥ l·ªói x·∫£y ra khi th√™m.");
            });
        }


    </script>
}
