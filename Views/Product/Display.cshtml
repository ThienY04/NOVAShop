@using lab03.Helpers
@model lab03.Models.Product

@{
    ViewData["Title"] = Model.Name;
    var variantData = Model.Variants?.Select(v => new { v.Color, v.Size, v.Stock }).ToList();
    var isAuthenticated = User.Identity.IsAuthenticated;
}


<div class="container my-5">
    <div class="row gx-5">
        <!-- ẢNH SẢN PHẨM -->
        <div class="col-md-6">
            @if (!string.IsNullOrEmpty(Model.ImageUrl))
            {
                <img src="~/images/@Model.ImageUrl" asp-append-version="true" alt="@Model.Name"
                     class="img-fluid rounded shadow-sm" style="max-height: 600px; object-fit: contain;" />
            }
            else
            {
                <p class="text-muted">Chưa có hình ảnh</p>
            }

            <div class="mt-3 d-flex gap-2 overflow-auto">
                @foreach (var img in Model.Images ?? new List<lab03.Models.ProductImage>())
                {
                    <img src="~/images/@img.Url" class="img-thumbnail"
                         style="width: 100px; height: 100px; object-fit: cover; cursor: pointer;"
                         onclick="document.querySelector('.img-fluid').src='@Url.Content("~/images/" + img.Url)'" />
                }
            </div>
        </div>

        <!-- THÔNG TIN SẢN PHẨM -->
        <div class="col-md-6">
            <h2 class="fw-bold">@Model.Name</h2>
            <p class="text-muted mb-1">Mã SP: <strong>SP-@Model.Id</strong> | Danh mục: @Model.Category?.Name</p>
            <p class="text-danger h4 fw-bold">@Model.Price.ToString("n0")₫</p>

            <p class="mt-3 text-secondary">
                @(!string.IsNullOrEmpty(Model.Description) ? Model.Description : "Mô tả đang cập nhật.")
            </p>

            <form id="productForm" onsubmit="addToCart(event)">
                <input type="hidden" name="productId" value="@Model.Id" />

                <!-- Size -->
                <div class="mb-3">
                    <label class="form-label">Kích thước (Size):</label>
                    <div class="d-flex gap-2 flex-wrap">
                        @foreach (var size in Model.Variants?.Select(v => v.Size).Distinct() ?? Enumerable.Empty<string>())
                        {
                            <input type="radio" class="btn-check" name="size" id="size-@size" value="@size" autocomplete="off" />
                            <label class="btn btn-outline-dark btn-sm" for="size-@size">@size</label>
                        }
                    </div>
                    <div class="text-danger mt-1 small" id="size-error">Vui lòng chọn kích thước.</div>
                </div>

                <!-- Color -->
                <div class="mb-3">
                    <label class="form-label">Màu sắc:</label>
                    <div class="d-flex gap-2 flex-wrap">
                        @foreach (var color in Model.Variants?.Select(v => v.Color).Distinct() ?? Enumerable.Empty<string>())
                        {
                            <input type="radio" class="btn-check" name="color" id="color-@color" value="@color" autocomplete="off" />
                            <label for="color-@color"
                                   class="color-circle position-relative"
                                   title="@color"
                                   style="background-color:@ColorHelper.ToColorCode(color);">
                                <span class="selected-dot"></span>
                            </label>
                        }
                    </div>
                    <div class="text-danger mt-1 small" id="color-error">Vui lòng chọn màu sắc.</div>
                </div>

                <!-- Số lượng -->
                <div class="mb-3 d-flex align-items-center" style="max-width: 150px;">
                    <button type="button" class="btn btn-outline-dark" id="btn-minus">–</button>
                    <input type="number" name="quantity" id="quantity" value="1" min="1"
                           class="form-control text-center mx-2" />
                    <button type="button" class="btn btn-outline-dark" id="btn-plus">+</button>
                </div>

                <button type="submit" class="btn btn-dark px-4 py-2" id="add-to-cart-btn">Thêm vào giỏ hàng</button>
            </form>
        </div>
    </div>
</div>

<!-- ✅ Bootstrap Toast -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="cartToast" class="toast align-items-center text-white bg-success border-0" role="alert">
        <div class="d-flex">
            <div class="toast-body">
                ✅ Đã thêm vào giỏ hàng!
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    </div>
</div>

<!-- STYLE -->
<style>
    .color-circle {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: inline-block;
        cursor: pointer;
        border: 2px solid transparent;
        position: relative;
        transition: all 0.2s ease-in-out;
    }

    .selected-dot {
        position: absolute;
        top: -6px;
        right: -6px;
        width: 12px;
        height: 12px;
        background-color: green;
        border: 2px solid white;
        border-radius: 50%;
        opacity: 0;
        box-shadow: 0 0 2px rgba(0,0,0,0.3);
        transition: opacity 0.2s ease-in-out;
    }

    .btn-check:checked + .color-circle .selected-dot {
        opacity: 1;
    }
    /* Ẩn nút tăng/giảm trên Chrome, Safari, Edge */
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Ẩn trên Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }

</style>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const variants = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(variantData));
            const isAuthenticated = @isAuthenticated.ToString().ToLower(); // true hoặc false
            const form = document.getElementById("productForm");
            const sizeInputs = document.querySelectorAll('input[name="size"]');
            const colorInputs = document.querySelectorAll('input[name="color"]');
            const sizeError = document.getElementById("size-error");
            const colorError = document.getElementById("color-error");
            const qty = document.getElementById("quantity");
            const btnMinus = document.getElementById("btn-minus");
            const btnPlus = document.getElementById("btn-plus");
            const addToCartBtn = document.getElementById("add-to-cart-btn");

            sizeError.style.display = "none";
            colorError.style.display = "none";

            function getSelectedVariant() {
                const selectedColor = document.querySelector('input[name="color"]:checked')?.value;
                const selectedSize = document.querySelector('input[name="size"]:checked')?.value;
                return variants.find(v => v.Color === selectedColor && v.Size === selectedSize);
            }

            btnMinus.addEventListener("click", () => {
                if (parseInt(qty.value) > 1) qty.value = parseInt(qty.value) - 1;
            });

            btnPlus.addEventListener("click", () => {
                const variant = getSelectedVariant();
                let currentQty = parseInt(qty.value);
                if (variant) {
                    if (currentQty < variant.Stock) qty.value = currentQty + 1;
                } else {
                    qty.value = currentQty + 1;
                }
            });

            sizeInputs.forEach(i => i.addEventListener("change", checkVariantExists));
            colorInputs.forEach(i => i.addEventListener("change", checkVariantExists));

            function checkVariantExists() {
                const variant = getSelectedVariant();

                if (variant) {
                    const maxStock = variant.Stock;
                    qty.max = maxStock;
                    if (parseInt(qty.value) > maxStock) qty.value = maxStock;

                    addToCartBtn.disabled = maxStock === 0;
                    addToCartBtn.textContent = maxStock === 0 ? "Hết hàng" : "Thêm vào giỏ hàng";
                    addToCartBtn.classList.toggle("btn-secondary", maxStock === 0);
                    addToCartBtn.classList.toggle("btn-dark", maxStock > 0);
                } else {
                    addToCartBtn.disabled = true;
                    addToCartBtn.textContent = "Hết hàng";
                    addToCartBtn.classList.remove("btn-dark");
                    addToCartBtn.classList.add("btn-secondary");
                }
            }

            form.addEventListener("submit", async function (e) {
                e.preventDefault();

                if (!isAuthenticated) {
                    alert("Vui lòng đăng nhập để thêm sản phẩm vào giỏ hàng.");
                    return;
                }
                const formData = new FormData(form);
                const size = formData.get("size");
                const color = formData.get("color");
                const quantity = parseInt(formData.get("quantity"));
                const productId = formData.get("productId");

                if (!size || !color) {
                    if (!size) sizeError.style.display = "block";
                    if (!color) colorError.style.display = "block";
                    return;
                }

                const variant = getSelectedVariant();
                if (!variant) {
                    alert("Biến thể sản phẩm không hợp lệ.");
                    return;
                }

                const response = await fetch("/ShoppingCart/AddToCart", {
                    method: "POST",
                    headers: { "Content-Type": "application/x-www-form-urlencoded" },
                    body: `productId=${productId}&quantity=${quantity}&size=${size}&color=${encodeURIComponent(color)}`
                });

                const data = await response.json();
                if (data.success) {
                    updateCartCount(data.cartCount);

                    // Hiện toast
                    const toastEl = document.getElementById('cartToast');
                    const toast = new bootstrap.Toast(toastEl);
                    toast.show();

                    const newQuantityInCart = data.quantityInCart ?? 0;
                    if (newQuantityInCart >= variant.Stock) {
                        addToCartBtn.disabled = true;
                        addToCartBtn.textContent = "Hết hàng";
                        addToCartBtn.classList.remove("btn-dark");
                        addToCartBtn.classList.add("btn-secondary");
                    }

                } else {
                    alert(data.message);
                }
            });

            function updateCartCount(count) {
                const badge = document.querySelector(".badge-cart");
                if (badge) {
                    badge.textContent = count;
                } else {
                    const btn = document.querySelector(".cart-button");
                    const newBadge = document.createElement("span");
                    newBadge.className = "badge-cart";
                    newBadge.textContent = count;
                    btn.appendChild(newBadge);
                }
            }

            checkVariantExists();
        });
    </script>
}
